import { db } from "./firebase";
import {
  collection,
  getDocs,
  doc,
  setDoc,
  getDoc,
  deleteDoc,
  query,
  orderBy,
} from "firebase/firestore";

export const fetchChatsByUserId = async (userId) => {
  try {
    const userRef = doc(db, "users", userId);
    const chatsRef = collection(userRef, "chats");
    const q = query(chatsRef, orderBy("timeUpdate", "desc"));

    const querySnapshot = await getDocs(q);

    const chats = [];
    querySnapshot.forEach((doc) => {
      const data = doc.data();
      chats.push({
        id: doc.id,
        title: data.title || "Untitled Chat",
        messages: data.messages || [],
        time: data.timeUpdate?.toDate
          ? data.timeUpdate.toDate()
          : data.timeUpdate || new Date(0),
      });
    });
    console.log("Fetched Chats:", chats);
    return chats;
  } catch (error) {
    console.error("Error fetching chats:", error);
    return [];
  }
};

export const updateChat = async (userId, chatId, updatedChat) => {
  const userRef = doc(db, "users", userId);

  try {
    const userSnap = await getDoc(userRef);
    if (!userSnap.exists()) {
      console.error("User document does not exist for updating chat:", userId);
      return { success: false, error: "User document not found." };
    }

    let chatRef;
    let autoGeneratedId = chatId;
    const isNewChat = !chatId;

    if (isNewChat) {
      chatRef = doc(collection(userRef, "chats"));
      autoGeneratedId = chatRef.id;
    } else {
      chatRef = doc(userRef, "chats", chatId);
    }

    const finalChatData = {
      ...updatedChat,
      timeUpdate:
        updatedChat.timeUpdate instanceof Date
          ? updatedChat.timeUpdate
          : new Date(),
    };

    if (
      isNewChat &&
      !finalChatData.title &&
      finalChatData.messages?.length > 0
    ) {
      const firstMessage = finalChatData.messages[0].text;
      finalChatData.title =
        firstMessage.substring(0, 30) + (firstMessage.length > 30 ? "..." : "");
    } else if (!finalChatData.title) {
      const existingChatSnap = await getDoc(chatRef);
      finalChatData.title = existingChatSnap.data()?.title || "Untitled Chat";
    }

    await setDoc(chatRef, finalChatData, { merge: true });

    console.log(
      `Chat ${autoGeneratedId} ${isNewChat ? "created" : "updated"} successfully for user ${userId}.`,
    );
    return {
      success: true,
      chatId: autoGeneratedId,
      title: finalChatData.title,
    };
  } catch (error) {
    console.error("Error updating/creating chat:", error);
    return { success: false, error: error.message };
  }
};

export const deleteChatFromFirestore = async (userId, chatId) => {
  if (!userId || !chatId) {
    return { success: false, error: "User ID or Chat ID is missing." };
  }
  try {
    const chatRef = doc(db, "users", userId, "chats", chatId);
    await deleteDoc(chatRef);
    console.log(
      `Chat document ${chatId} deleted successfully for user ${userId}.`,
    );
    return { success: true };
  } catch (error) {
    console.error(
      `Error deleting chat document ${chatId} for user ${userId}:`,
      error,
    );
    return { success: false, error: error.message };
  }
};
